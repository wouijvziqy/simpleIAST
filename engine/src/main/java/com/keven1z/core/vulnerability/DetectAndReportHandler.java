package com.keven1z.core.vulnerability;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.keven1z.core.EngineController;
import com.keven1z.core.consts.CommonConst;
import com.keven1z.core.model.IASTContext;
import com.keven1z.core.pojo.FindingData;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.pojo.ReportData;
import com.keven1z.core.vulnerability.detectors.*;
import com.keven1z.core.vulnerability.report.ReportBuilder;
import com.keven1z.core.vulnerability.report.TaintMessage;
import com.keven1z.core.vulnerability.report.ReportPrinter;
import com.keven1z.core.vulnerability.report.ReportSender;

import java.util.List;

public class DetectAndReportHandler {
    public static final DetectorComposite detectorComposite;

    static {
        detectorComposite = new DetectorComposite();
        detectorComposite.addDetector(new SSRFDetector());
        detectorComposite.addDetector(new SqliDetector());
        detectorComposite.addDetector(new XxeDetector());
        detectorComposite.addDetector(new CmdiDetector());
        detectorComposite.addDetector(new DeserializationDetector());
        detectorComposite.addDetector(new UrlRedirectDetector());
        detectorComposite.addDetector(new XSSDetector());
        detectorComposite.addDetector(new PathTraversalDetector());
        detectorComposite.addDetector(new FileUploadDetector());
        detectorComposite.addDetector(new SpelDetector());
    }

    public static void doHandle(TaintMessage taintMessage) throws JsonProcessingException {
        boolean isDetect = detectorComposite.detect(taintMessage);
        if (!isDetect) {
            return;
        }

        List<FindingData> findingDataList = detectorComposite.getFindingDataList();
        ReportData reportData = new ReportData();
        reportData.setAgentId(taintMessage.getAgentId());
        HttpRequestData httpRequestData = new HttpRequestData(taintMessage.getUrl(), taintMessage.getMethod(), taintMessage.getRequestHeaders());
        httpRequestData.setRequestBody(taintMessage.getRequestBody());
        reportData.setRequestData(httpRequestData);
        HttpResponseData httpResponseData = new HttpResponseData(taintMessage.getResponseHeaders());
        reportData.setResponseData(httpResponseData);
        reportData.setFindingDataList(findingDataList);

        report(reportData);

    }

    private static void report(ReportData reportData) throws JsonProcessingException {
        String reportJson = ReportBuilder.build(reportData);
        String mode = EngineController.context.getMode();
        //debug模式 默认打印漏洞信息
        if (IASTContext.getContext().isOfflineEnabled()) {
            ReportPrinter.print(reportJson);
        } else if (CommonConst.MODE_NORMAL.equals(mode)) {
            ReportSender.send(reportJson);
        }
    }
}
