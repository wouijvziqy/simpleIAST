package com.keven1z.core.vulnerability;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.keven1z.core.EngineController;
import com.keven1z.core.consts.CommonConst;
import com.keven1z.core.log.ErrorType;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.IASTContext;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.model.graph.TaintGraph;
import com.keven1z.core.model.graph.TaintNode;
import com.keven1z.core.pojo.*;
import com.keven1z.core.vulnerability.detectors.*;
import com.keven1z.core.vulnerability.report.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class DetectAndReportHandler {
    public static final List<Detector> detectors = new ArrayList<>();

    static {
        detectors.add(new SSRFDetector());
        detectors.add(new SqliDetector());
        detectors.add(new XxeDetector());
        detectors.add(new CmdiDetector());
        detectors.add(new DeserializationDetector());
        detectors.add(new UrlRedirectDetector());
        detectors.add(new XSSDetector());
        detectors.add(new PathTraversalDetector());
        detectors.add(new FileUploadDetector());
        detectors.add(new SpelDetector());

    }

    public static void doHandle(ReportMessage reportMessage) throws JsonProcessingException {
        List<FindingData> findingDataList = new ArrayList<>(reportMessage.getSingleFindings());
        if (reportMessage.isContainTaint()) {
            findingDataList.addAll(checkTaint(reportMessage));
        }
        if (findingDataList.isEmpty()) {
            return;
        }
        ReportData reportData = buildReportData(reportMessage.getAgentId(), reportMessage.getHttp(), findingDataList);
        report(reportData);

    }

    private static ReportData buildReportData(String agentId, HttpMessage http, List<FindingData> findingDataList) {
        ReportData reportData = new ReportData();
        reportData.setAgentId(agentId);
        if (http != null) {
            HttpRequestData httpRequestData = new HttpRequestData(http.getUrl(), http.getMethod(), http.getRequestHeaders());
            httpRequestData.setRequestBody(http.getRequestBody());
            reportData.setRequestData(httpRequestData);
            HttpResponseData httpResponseData = new HttpResponseData(http.getResponseHeaders());
            reportData.setResponseData(httpResponseData);
        }
        reportData.setFindingDataList(findingDataList);
        return reportData;
    }

    private static List<FindingData> checkTaint(ReportMessage reportMessage) {
        List<TaintNode> taintFindings = reportMessage.getTaintFindings();
        List<FindingData> findingDataList = new ArrayList<>();
        for (TaintNode sinkNode : taintFindings) {
            String vulnType = sinkNode.getTaintData().getVulnType();
            Detector detector = getDetector(vulnType);
            if (detector == null) {
                LogTool.warn(ErrorType.DETECT_VULNERABILITY_ERROR, "Failed to getDetector,detector is null,vulnerability type is " + vulnType);
                continue;
            }
            TaintGraph taintGraph = reportMessage.getTaintGraph();

            LinkedList<TaintData> flowLinks = taintGraph.bfs(sinkNode);
            if (detector.detect(flowLinks, reportMessage.getHttp())) {
                TaintFindingData findingData = new TaintFindingData();
                findingData.setFlowData(flowLinks);
                findingData.setVulnerableType(vulnType);
                findingDataList.add(findingData);
            }
        }
        return findingDataList;
    }

    private static Detector getDetector(String vulnType) {
        for (Detector detector : detectors) {
            if (detector.supportType(vulnType)) {
                return detector;
            }
        }
        return null;
    }

    private static void report(ReportData reportData) throws JsonProcessingException {
        String reportJson = ReportBuilder.build(reportData);
        String mode = EngineController.context.getMode();
        //debug模式 默认打印漏洞信息
        if (IASTContext.getContext().isOfflineEnabled()) {
            ReportPrinter.print(reportJson);
        } else if (CommonConst.MODE_NORMAL.equals(mode)) {
            ReportSender.send(reportJson);
        }
    }
}
