package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnConst;
import com.keven1z.core.hook.http.HttpContext;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import com.keven1z.core.policy.SanitizerTypeEnum;
import org.apache.log4j.Logger;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class XSSDetector implements Detector {
    private static final String XSS_CONTENT_TYPE = "text/html";
    private static final String XSS_SOURCE_TYPE = "java.lang.String";

    private static final Logger logger = Logger.getLogger(XSSDetector.class);

    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpContext http) {
        List<TaintData> sourceList = TaintUtils.getSourceList(flowLinks);
        /*
         * 检查污染源中是否存在String
         */
        boolean isContainedString = false;
        for (TaintData source : sourceList) {
            if (XSS_SOURCE_TYPE.equals(source.getTaintValueType())) {
                isContainedString = true;
                break;
            }
        }
        if (!isContainedString) {
            if (LogTool.isDebugEnabled()) {
                logger.warn(String.format("Failed to detect xss,url:%s, reason:Source is not java/lang/String", http.getRequest().getRequestURLString()));
            }
            return false;
        }

        Map<String, String> responseHeaders = http.getResponse().getHeaders();
        if (responseHeaders == null || responseHeaders.isEmpty()) {
            return false;
        }
        String contentType = responseHeaders.get("Content-Type") == null ? responseHeaders.get("content-type") : responseHeaders.get("Content-Type");
        if (contentType == null || !contentType.toLowerCase(Locale.CHINA).startsWith(XSS_CONTENT_TYPE)) {
            if (LogTool.isDebugEnabled()) {
                logger.warn(String.format("Failed to detect xss,url:%s, reason:Content-type:%s", http.getRequest().getRequestURLString(), contentType));
            }
            return false;
        }

        if (TaintUtils.isContainSanitizer(flowLinks, SanitizerTypeEnum.parse)) {
            if (LogTool.isDebugEnabled()) {
                logger.warn(String.format("Failed to detect xss,url:%s, reason:The source of pollution is forced to parse ", http.getRequest().getRequestURLString()));
            }
            return false;
        }
        return true;
    }

    @Override
    public boolean supportType(String type) {
        return VulnConst.XSS.equals(type);
    }

}
