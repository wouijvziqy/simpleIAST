package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnConst;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import com.keven1z.core.vulnerability.report.TaintMessage;

import java.util.LinkedList;
import java.util.List;

public class SSRFDetector implements Detector {
    @Override
    public boolean detect(TaintMessage taintMessage) {
        LinkedList<TaintData> sinkLinks = taintMessage.getFlowLinks();
        List<String> sourceList = TaintUtils.calculateSourceValue(sinkLinks);
        if (sourceList.isEmpty()) {
            return false;
        }
        for (String source : sourceList) {
            if (isURL(source)) {
                return true;
            }
        }
        TaintData sinkTaint = taintMessage.getCurrentSinkNode().getTaintData();
        String taintValue = sinkTaint.getFromValue();
        if (taintValue == null) {
            return false;
        }
        return isURL(taintValue);
    }

    @Override
    public boolean supportType(String type) {
        return VulnConst.SSRF.equals(type);
    }

    public static boolean isURL(String str) {
        //转换为小写
        str = str.toLowerCase();
        String regex = "^((https|http|ftp|rtsp|mms)?://)"  //https、http、ftp、rtsp、mms
                + "?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?" //ftp的user@
                + "(([0-9]{1,3}\\.){3}[0-9]{1,3}" // IP形式的URL- 例如：199.194.52.184
                + "|" // 允许IP和DOMAIN（域名）
                + "([0-9a-z_!~*'()-]+\\.)*" // 域名- www.
                + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\\." // 二级域名
                + "[a-z]{2,6})" // first level domain- .com or .museum
                + "(:[0-9]{1,5})?" // 端口号最大为65535,5位数
                + "((/?)|" // a slash isn't required if there is no file name
                + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
        return str.matches(regex);
    }
}
