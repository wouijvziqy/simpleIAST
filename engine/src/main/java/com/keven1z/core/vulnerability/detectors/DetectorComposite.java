package com.keven1z.core.vulnerability.detectors;


import com.keven1z.core.model.graph.TaintGraph;
import com.keven1z.core.model.graph.TaintNode;
import com.keven1z.core.log.ErrorType;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.pojo.FindingData;
import com.keven1z.core.vulnerability.Detector;
import com.keven1z.core.vulnerability.report.TaintMessage;

import java.util.*;

/**
 * @author keven1z
 * @date 2023/01/15
 */
public class DetectorComposite implements Detector {
    private final List<Detector> detectors =
            new LinkedList<>();
    private final List<FindingData> findingDataList =
            new ArrayList<>();

    @Override
    public boolean detect(TaintMessage taintMessage) {
        try {
            return doDetect(taintMessage);
        } catch (Exception e) {
            LogTool.error(ErrorType.DETECT_VULNERABILITY_ERROR, "An exception occurred during vulnerability detecting", e);
            return false;
        }
    }

    private boolean doDetect(TaintMessage taintMessage) {
        TaintGraph taintGraph = taintMessage.getTaintGraph();
        List<TaintNode> sinkNodes = taintGraph.getSinkNode();
        for (TaintNode sinkNode : sinkNodes) {
            String vulnType = sinkNode.getTaintData().getVulnType();
            Detector detector = getDetector(vulnType);
            if (detector == null) {
                LogTool.warn(ErrorType.DETECT_VULNERABILITY_ERROR, "Failed to getDetector,detector is null,vulnerability type is " + vulnType);
                return false;
            }
            taintMessage.fillMessage(sinkNode);
            if (detector.detect(taintMessage)) {
                FindingData findingData = new FindingData();
                findingData.setFlowData(taintMessage.getFlowLinks());
                findingData.setVulnerableType(vulnType);
                findingDataList.add(findingData);
            }
        }
        return !findingDataList.isEmpty();
    }

    @Override
    public boolean supportType(String type) {
        return getDetector(type) != null;
    }

    private Detector getDetector(String type) {
        for (Detector detector : detectors) {
            if (detector.supportType(type)) {
                return detector;
            }
        }
        return null;
    }

    /**
     * 返回一个只读的hook集合
     */
    public List<Detector> getDetectors() {
        return Collections.unmodifiableList(this.detectors);
    }

    public void addDetector(Detector detector) {
        if (detector == null) {
            return;
        }
        detectors.add(detector);
    }

    /**
     * 清除findingDataList
     */
    public void clear() {
        this.findingDataList.clear();
    }

    public List<FindingData> getFindingDataList() {
        return this.findingDataList;
    }

}
