package com.keven1z.core.vulnerability;

import com.keven1z.core.hook.http.HttpContext;
import com.keven1z.core.hook.http.request.AbstractRequest;
import com.keven1z.core.hook.http.response.HttpServletResponse;
import com.keven1z.core.log.ErrorType;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.ApplicationModel;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.model.graph.TaintGraph;
import com.keven1z.core.model.graph.TaintNode;
import com.keven1z.core.pojo.*;
import com.keven1z.core.vulnerability.detectors.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import static com.keven1z.core.hook.HookThreadLocal.*;

/**
 * @author keven1z
 * @date 2023/10/29
 * hook以及流量处理类
 */
public class FlowProcessingStation {
    private static final List<Detector> detectors = new ArrayList<>();

    static {
        detectors.add(new SSRFDetector());
        detectors.add(new SqliDetector());
        detectors.add(new XxeDetector());
        detectors.add(new CmdiDetector());
        detectors.add(new DeserializationDetector());
        detectors.add(new UrlRedirectDetector());
        detectors.add(new XSSDetector());
        detectors.add(new PathTraversalDetector());
        detectors.add(new FileUploadDetector());
        detectors.add(new SpelDetector());
    }

    private FlowProcessingStation() {
    }

    public static FlowProcessingStation getInstance() {
        return Inner.flowProcessingStation;
    }

    private static class Inner {
        private static final FlowProcessingStation flowProcessingStation = new FlowProcessingStation();
    }

    public void doProcess() {
        List<FindingData> findingDataList = new ArrayList<>(SINGLE_FINDING_THREADLOCAL.get());
        findingDataList.addAll(doProcessTaint());
        if (findingDataList.isEmpty()) {
            return;
        }
        ReportData reportData = new ReportData(ApplicationModel.getAgentId());
        reportData.setRequestData(buildRequest());
        reportData.setResponseData(buildResponse());
        reportData.setFindingDataList(findingDataList);
        REPORT_QUEUE.offer(reportData);

    }


    private static List<FindingData> doProcessTaint() {
        TaintGraph taintGraph = TAINT_GRAPH_THREAD_LOCAL.get();
        List<FindingData> findingDataList = new ArrayList<>();

        if (taintGraph == null) {
            return findingDataList;
        }
        List<TaintNode> taintFindings = taintGraph.getSinkNodes();
        for (TaintNode sinkNode : taintFindings) {
            String vulnType = sinkNode.getTaintData().getVulnType();
            Detector detector = getDetector(vulnType);
            if (detector == null) {
                LogTool.warn(ErrorType.DETECT_VULNERABILITY_ERROR, "Failed to getDetector,detector is null,vulnerability type is " + vulnType);
                continue;
            }

            LinkedList<TaintData> flowLinks = taintGraph.bfs(sinkNode);
            if (detector.detect(flowLinks, REQUEST_THREAD_LOCAL.get())) {
                TaintFindingData findingData = new TaintFindingData();
                findingData.setFlowData(flowLinks);
                findingData.setVulnerableType(vulnType);
                findingDataList.add(findingData);
            }
        }
        return findingDataList;
    }

    private static Detector getDetector(String vulnType) {
        for (Detector detector : detectors) {
            if (detector.supportType(vulnType)) {
                return detector;
            }
        }
        return null;
    }
    public HttpRequestData buildRequest(){
        AbstractRequest request = REQUEST_THREAD_LOCAL.get().getRequest();
        HttpRequestData httpRequestData = new HttpRequestData(request.getRequestURLString(), request.getMethod(), request.getHeaders());
        httpRequestData.setRequestBody(request.getStringBody());
        return httpRequestData;
    }
    public HttpResponseData buildResponse(){
        HttpServletResponse response = REQUEST_THREAD_LOCAL.get().getResponse();
        HttpResponseData httpResponseData = new HttpResponseData(response.getHeaders());
        return httpResponseData;
    }
}
